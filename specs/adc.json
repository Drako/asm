[
  {
    "opcode": "14 ib",
    "instruction": "ADC AL, imm8",
    "operand_encoding": "I",
    "description": "Add with carry imm8 to AL."
  },
  {
    "opcode": "15 iw",
    "instruction": "ADC AX, imm16",
    "operand_encoding": "I",
    "description": "Add with carry imm16 to AX."
  },
  {
    "opcode": "15 id",
    "instruction": "ADC EAX, imm32",
    "operand_encoding": "I",
    "description": "Add with carry imm32 to EAX."
  },
  {
    "opcode": "REX.W + 15 id",
    "instruction": "ADC RAX, imm32",
    "operand_encoding": "I",
    "description": "Add with carry imm32 sign extended to 64-bits to RAX."
  },
  {
    "opcode": "80 /2 ib",
    "instruction": "ADC r/m8, imm8",
    "operand_encoding": "MI",
    "description": "Add with carry imm8 to r/m8."
  },
  {
    "opcode": "REX + 80 /2 ib",
    "instruction": "ADC r/m8*, imm8",
    "operand_encoding": "MI",
    "description": "Add with carry imm8 to r/m8."
  },
  {
    "opcode": "81 /2 iw",
    "instruction": "ADC r/m16, imm16",
    "operand_encoding": "MI",
    "description": "Add with carry imm16 to r/m16."
  },
  {
    "opcode": "81 /2 id",
    "instruction": "ADC r/m32, imm32",
    "operand_encoding": "MI",
    "description": "Add with CF imm32 to r/m32."
  },
  {
    "opcode": "REX.W + 81 /2 id",
    "instruction": "ADC r/m64, imm32",
    "operand_encoding": "MI",
    "description": "Add with CF imm32 sign extended to 64-bits to r/m64."
  },
  {
    "opcode": "83 /2 ib",
    "instruction": "ADC r/m16, imm8",
    "operand_encoding": "MI",
    "description": "Add with CF sign-extended imm8 to r/m16."
  },
  {
    "opcode": "83 /2 ib",
    "instruction": "ADC r/m32, imm8",
    "operand_encoding": "MI",
    "description": "Add with CF sign-extended imm8 into r/m32."
  },
  {
    "opcode": "REX.W + 83 /2 ib",
    "instruction": "ADC r/m64, imm8",
    "operand_encoding": "MI",
    "description": "Add with CF sign-extended imm8 into r/m64."
  },
  {
    "opcode": "10 /r",
    "instruction": "ADC r/m8, r8",
    "operand_encoding": "MR",
    "description": "Add with carry byte register to r/m8."
  },
  {
    "opcode": "REX + 10 /r",
    "instruction": "ADC r/m8*, r8*",
    "operand_encoding": "MR",
    "description": "Add with carry byte register to r/m64."
  },
  {
    "opcode": "11 /r",
    "instruction": "ADC r/m16, r16",
    "operand_encoding": "MR",
    "description": "Add with carry r16 to r/m16."
  },
  {
    "opcode": "11 /r",
    "instruction": "ADC r/m32, r32",
    "operand_encoding": "MR",
    "description": "Add with CF r32 to r/m32."
  },
  {
    "opcode": "REX.W + 11 /r",
    "instruction": "ADC r/m64, r64",
    "operand_encoding": "MR",
    "description": "Add with CF r64 to r/m64."
  },
  {
    "opcode": "12 /r",
    "instruction": "ADC r8, r/m8",
    "operand_encoding": "RM",
    "description": "Add with carry r/m8 to byte register."
  },
  {
    "opcode": "REX + 12 /r",
    "instruction": "ADC r8*, r/m8*",
    "operand_encoding": "RM",
    "description": "Add with carry r/m64 to byte register."
  },
  {
    "opcode": "13 /r",
    "instruction": "ADC r16, r/m16",
    "operand_encoding": "RM",
    "description": "Add with carry r/m16 to r16."
  },
  {
    "opcode": "13 /r",
    "instruction": "ADC r32, r/m32",
    "operand_encoding": "RM",
    "description": "Add with CF r/m32 to r32."
  },
  {
    "opcode": "REX.W + 13 /r",
    "instruction": "ADC r64, r/m64",
    "operand_encoding": "RM",
    "description": "Add with CF r/m64 to r64."
  }
]
