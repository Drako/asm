[
  {
    "opcode": "NP 0F 64 /r1",
    "instruction": "PCMPGTB mm, mm/m64",
    "operand_encoding": "A",
    "description": "Compare packed signed byte integers in mm and mm/m64 for greater than."
  },
  {
    "opcode": "66 0F 64 /r",
    "instruction": "PCMPGTB xmm1, xmm2/m128",
    "operand_encoding": "A",
    "description": "Compare packed signed byte integers in xmm1 and xmm2/m128 for greater than."
  },
  {
    "opcode": "NP 0F 65 /r1",
    "instruction": "PCMPGTW mm, mm/m64",
    "operand_encoding": "A",
    "description": "Compare packed signed word integers in mm and mm/m64 for greater than."
  },
  {
    "opcode": "66 0F 65 /r",
    "instruction": "PCMPGTW xmm1, xmm2/m128",
    "operand_encoding": "A",
    "description": "Compare packed signed word integers in xmm1 and xmm2/m128 for greater than."
  },
  {
    "opcode": "NP 0F 66 /r1",
    "instruction": "PCMPGTD mm, mm/m64",
    "operand_encoding": "A",
    "description": "Compare packed signed doubleword integers in mm and mm/m64 for greater than."
  },
  {
    "opcode": "66 0F 66 /r",
    "instruction": "PCMPGTD xmm1, xmm2/m128",
    "operand_encoding": "A",
    "description": "Compare packed signed doubleword integers in xmm1 and xmm2/m128 for greater than."
  },
  {
    "opcode": "VEX.128.66.0F.WIG 64 /r",
    "instruction": "VPCMPGTB xmm1, xmm2, xmm3/m128",
    "operand_encoding": "B",
    "description": "Compare packed signed byte integers in xmm2 and xmm3/m128 for greater than."
  },
  {
    "opcode": "VEX.128.66.0F.WIG 65 /r",
    "instruction": "VPCMPGTW xmm1, xmm2, xmm3/m128",
    "operand_encoding": "B",
    "description": "Compare packed signed word integers in xmm2 and xmm3/m128 for greater than."
  },
  {
    "opcode": "VEX.128.66.0F.WIG 66 /r",
    "instruction": "VPCMPGTD xmm1, xmm2, xmm3/m128",
    "operand_encoding": "B",
    "description": "Compare packed signed doubleword integers in xmm2 and xmm3/m128 for greater than."
  },
  {
    "opcode": "VEX.256.66.0F.WIG 64 /r",
    "instruction": "VPCMPGTB ymm1, ymm2, ymm3/m256",
    "operand_encoding": "B",
    "description": "Compare packed signed byte integers in ymm2 and ymm3/m256 for greater than."
  },
  {
    "opcode": "VEX.256.66.0F.WIG 65 /r",
    "instruction": "VPCMPGTW ymm1, ymm2, ymm3/m256",
    "operand_encoding": "B",
    "description": "Compare packed signed word integers in ymm2 and ymm3/m256 for greater than."
  },
  {
    "opcode": "VEX.256.66.0F.WIG 66 /r",
    "instruction": "VPCMPGTD ymm1, ymm2, ymm3/m256",
    "operand_encoding": "B",
    "description": "Compare packed signed doubleword integers in ymm2 and ymm3/m256 for greater than."
  },
  {
    "opcode": "EVEX.128.66.0F.W0 66 /r",
    "instruction": "VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst",
    "operand_encoding": "C",
    "description": "Compare Greater between int32 vector xmm2 and int32 vector xmm3/m128/m32bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask."
  },
  {
    "opcode": "EVEX.256.66.0F.W0 66 /r",
    "instruction": "VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst",
    "operand_encoding": "C",
    "description": "Compare Greater between int32 vector ymm2 and int32 vector ymm3/m256/m32bcst, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask."
  },
  {
    "opcode": "EVEX.512.66.0F.W0 66 /r",
    "instruction": "VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst",
    "operand_encoding": "C",
    "description": "Compare Greater between int32 elements in zmm2 and zmm3/m512/m32bcst, and set destination k1 according to the comparison results under writemask. k2."
  },
  {
    "opcode": "EVEX.128.66.0F.WIG 64 /r",
    "instruction": "VPCMPGTB k1 {k2}, xmm2, xmm3/m128",
    "operand_encoding": "D",
    "description": "Compare packed signed byte integers in xmm2 and xmm3/m128 for greater than, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask."
  },
  {
    "opcode": "EVEX.256.66.0F.WIG 64 /r",
    "instruction": "VPCMPGTB k1 {k2}, ymm2, ymm3/m256",
    "operand_encoding": "D",
    "description": "Compare packed signed byte integers in ymm2 and ymm3/m256 for greater than, and set vector mask k1 to reflect the zero/nonzero status of each element of the result, under writemask."
  }
]
