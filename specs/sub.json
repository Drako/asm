[
  {
    "opcode": "2C ib",
    "instruction": "SUB AL, imm8",
    "operand_encoding": "I",
    "description": "Subtract imm8 from AL."
  },
  {
    "opcode": "2D iw",
    "instruction": "SUB AX, imm16",
    "operand_encoding": "I",
    "description": "Subtract imm16 from AX."
  },
  {
    "opcode": "2D id",
    "instruction": "SUB EAX, imm32",
    "operand_encoding": "I",
    "description": "Subtract imm32 from EAX."
  },
  {
    "opcode": "REX.W + 2D id",
    "instruction": "SUB RAX, imm32",
    "operand_encoding": "I",
    "description": "Subtract imm32 sign-extended to 64-bits from RAX."
  },
  {
    "opcode": "80 /5 ib",
    "instruction": "SUB r/m8, imm8",
    "operand_encoding": "MI",
    "description": "Subtract imm8 from r/m8."
  },
  {
    "opcode": "REX + 80 /5 ib",
    "instruction": "SUB r/m8*, imm8",
    "operand_encoding": "MI",
    "description": "Subtract imm8 from r/m8."
  },
  {
    "opcode": "81 /5 iw",
    "instruction": "SUB r/m16, imm16",
    "operand_encoding": "MI",
    "description": "Subtract imm16 from r/m16."
  },
  {
    "opcode": "81 /5 id",
    "instruction": "SUB r/m32, imm32",
    "operand_encoding": "MI",
    "description": "Subtract imm32 from r/m32."
  },
  {
    "opcode": "REX.W + 81 /5 id",
    "instruction": "SUB r/m64, imm32",
    "operand_encoding": "MI",
    "description": "Subtract imm32 sign-extended to 64-bits from r/m64."
  },
  {
    "opcode": "83 /5 ib",
    "instruction": "SUB r/m16, imm8",
    "operand_encoding": "MI",
    "description": "Subtract sign-extended imm8 from r/m16."
  },
  {
    "opcode": "83 /5 ib",
    "instruction": "SUB r/m32, imm8",
    "operand_encoding": "MI",
    "description": "Subtract sign-extended imm8 from r/m32."
  },
  {
    "opcode": "REX.W + 83 /5 ib",
    "instruction": "SUB r/m64, imm8",
    "operand_encoding": "MI",
    "description": "Subtract sign-extended imm8 from r/m64."
  },
  {
    "opcode": "28 /r",
    "instruction": "SUB r/m8, r8",
    "operand_encoding": "MR",
    "description": "Subtract r8 from r/m8."
  },
  {
    "opcode": "REX + 28 /r",
    "instruction": "SUB r/m8*, r8*",
    "operand_encoding": "MR",
    "description": "Subtract r8 from r/m8."
  },
  {
    "opcode": "29 /r",
    "instruction": "SUB r/m16, r16",
    "operand_encoding": "MR",
    "description": "Subtract r16 from r/m16."
  },
  {
    "opcode": "29 /r",
    "instruction": "SUB r/m32, r32",
    "operand_encoding": "MR",
    "description": "Subtract r32 from r/m32."
  },
  {
    "opcode": "REX.W + 29 /r",
    "instruction": "SUB r/m64, r64",
    "operand_encoding": "MR",
    "description": "Subtract r64 from r/m64."
  },
  {
    "opcode": "2A /r",
    "instruction": "SUB r8, r/m8",
    "operand_encoding": "RM",
    "description": "Subtract r/m8 from r8."
  },
  {
    "opcode": "REX + 2A /r",
    "instruction": "SUB r8*, r/m8*",
    "operand_encoding": "RM",
    "description": "Subtract r/m8 from r8."
  },
  {
    "opcode": "2B /r",
    "instruction": "SUB r16, r/m16",
    "operand_encoding": "RM",
    "description": "Subtract r/m16 from r16."
  },
  {
    "opcode": "2B /r",
    "instruction": "SUB r32, r/m32",
    "operand_encoding": "RM",
    "description": "Subtract r/m32 from r32."
  },
  {
    "opcode": "REX.W + 2B /r",
    "instruction": "SUB r64, r/m64",
    "operand_encoding": "RM",
    "description": "Subtract r/m64 from r64."
  }
]
